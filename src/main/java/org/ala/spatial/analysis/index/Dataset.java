/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ala.spatial.analysis.index;

import java.io.File;
import java.util.Date;
import org.ala.spatial.util.TabulationSettings;

/**
 * One dataset is required for each occurrences file.
 *
 * @author Adam
 */
public class Dataset {

    /**
     * Full path of occurrences file as String.
     */
    String occurrencesFilename;
    /**
     * Dataset name as String.
     */
    String name;
    /**
     * Version as Date
     */
    Date date;
    /**
     * Flag to determine if dataset is ready for use.
     */
    boolean isReady;
    /**
     * Flag for enabled/disabled
     */
    boolean isEnabled;
    /**
     * loaded OccurrencesIndex for this dataset
     */
    OccurrencesIndex occurrencesIndex;

    /**
     *
     * @param occurrencesFilename file path and name of the occurrences file as String
     * @param name name of this occurrences file as String.  Must contain file name
     * compatible characters.
     * @param date date of the occurrences file as Date.  For maintaining versions.
     * @param forceUpdate update flag for loading the dataset.  Set as 'true' to
     * automatically update the associated index for this dataset if it is 'out of date'.
     * The dataset is marked as 'out of date' by file system date/time for the
     * <code>occurrencesFilename</code> not the <code>date</code> value.
     * @param enabled flag for enabled/disabled.
     * @param load flag for loading this dataset, if it is up to date and enabled.
     */
    public Dataset(String occurrencesFilename, String name, Date date, boolean forceUpdate, boolean enabled, boolean load) throws Exception {
        //init class variables
        this.occurrencesFilename = occurrencesFilename;
        this.name = name;
        this.date = date;
        this.isReady = false;
        this.isEnabled = enabled;

        //create index
        if (date.after(new Date(0))) {
            createDirectory();
        }

        //update if required and allowed
        //updateOccurrencesIndex(forceUpdate);
        //updateSamplingIndex(forceUpdate);

        //update ready flag
        if (load) {
            load();
        }
    }

    /**
     * create index directory for this dataset if it does not exist
     * 
     * @throws Exception
     */
    void createDirectory() throws Exception {
        //create index directory if it does not exist
        try {
            File dir = new File(getDirectoryName());
            if (!dir.exists()) {
                dir.mkdir();
            }
        } catch (Exception e) {
            System.out.println("org.ala.spatial.analysis.index.Dataset error while creating directory "
                    + getDirectoryName()
                    + File.separator
                    + " with name="
                    + name
                    + ", is 'name' a valid filename?");
            throw (e);
        }
    }

    /**
     *
     * @return unique directory for this index.
     */
    public String getDirectoryName() {
        return TabulationSettings.index_path + File.separator + getUniqueName() + File.separator;
    }

    /**
     * Generate occurrences indexes for this dataset.
     *
     * Files created are stored in the global index folder under a directory
     * generated by the unique <code>name</code> and <code>date</code>.
     *
     * Index dates are checked against the occurrences file to determine if an
     * update is necessary.
     * 
     * @param forceUpdate flag to force an update and ignore file date checks as boolean.
     */
    public void updateOccurrencesIndex(boolean forceUpdate) {
        OccurrencesIndex oi = new OccurrencesIndex(this, occurrencesFilename, getDirectoryName());
        oi.occurrencesUpdate(forceUpdate);
    }

    /**
     * Generate sampling indexes for this dataset.
     *
     * Files created are stored in the global index folder under a directory
     * generated by the unique <code>name</code> and <code>date</code>.
     *
     * Index dates are checked against the occurrences file to determine if an
     * update is necessary.
     *
     * @param forceUpdate flag to force an update and ignore file date checks as boolean.
     */
    public void updateSamplingIndex(boolean forceUpdate) {
        OccurrencesIndex oi = new OccurrencesIndex(this, occurrencesFilename, getDirectoryName());
        SamplingIndex si = new SamplingIndex(getDirectoryName(), oi.getPointsPairs());
        si.occurrencesUpdate(forceUpdate);

        //TODO: separate filtering index
        FilteringIndex fi = new FilteringIndex(getDirectoryName());
        fi.occurrencesUpdate(forceUpdate);
    }

    /**
     * check if this dataset is up to date.
     *
     * @return true if dataset is ready to use.
     */
    private boolean isUpToDate() {
        return true;/*
        OccurrencesIndex oi = new OccurrencesIndex(occurrencesFilename, getDirectoryName());
        SamplingIndex si = new SamplingIndex(getDirectoryName(), null);

        return oi.isUpToDate() && si.isUpToDate();*/
    }

    /**
     *
     * @return true if this dataset is enabled
     */
    boolean isEnabled() {
        return isEnabled;
    }

    /**
     * valid when <code>(isReady() && isUpToDate()) == true</code>
     * 
     * @return occurrenceIndex for this dataset.
     */
    OccurrencesIndex getOccurrencesIndex() {
        return occurrencesIndex;
    }

    /**
     *
     * @return true when dataset is loaded and ready for use.
     */
    boolean isReady() {
        return isReady;
    }

    /**
     * attempts to load the dataset.
     *
     * Dataset can only be loaded if it is up to date and enabled.
     *
     * Dataset must be in an unloaded state before it is loaded.
     *
     * @return true if load was performed and successful.
     */
    public boolean load() {
        if (occurrencesIndex != null) {
            return false;
        }

        occurrencesIndex = new OccurrencesIndex(this, occurrencesFilename, getDirectoryName());

        if (isUpToDate() && isEnabled()) {
            this.isReady = occurrencesIndex.load();
        }

        return isReady();
    }

    /**
     * unloads the dataset.
     */
    public void unload() {
        if (occurrencesIndex != null) {
            occurrencesIndex.unload();
            occurrencesIndex = null;
            this.isReady = false;
        }
    }

    /**
     * 
     * @return unique name for this dataset as String.
     */
    public String getUniqueName() {
        return name + "_" + date.getTime();
    }

    FilteringIndex getFilteringIndex() {
        return new FilteringIndex(getDirectoryName());
    }
}
