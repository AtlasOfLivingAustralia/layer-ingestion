/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package org.ala.spatial.analysis.index;

import java.util.Date;

/**
 * One dataset is required for each occurrences file.
 *
 * @author Adam
 */
public class DatasetLoadedPoints extends Dataset {

    public DatasetLoadedPoints(String occurrencesFilename, String name, Date date, boolean forceUpdate, boolean enabled, boolean load) throws Exception {
        super(occurrencesFilename, name, date, forceUpdate, enabled, load);
    }

    /**
     * Generate occurrences indexes for this dataset.
     *
     * Files created are stored in the global index folder under a directory
     * generated by the unique <code>name</code> and <code>date</code>.
     *
     * Index dates are checked against the occurrences file to determine if an
     * update is necessary.
     * 
     * @param forceUpdate flag to force an update and ignore file date checks as boolean.
     */
    public void updateOccurrencesIndex(boolean forceUpdate) {
    }

    /**
     * Generate sampling indexes for this dataset.
     *
     * Files created are stored in the global index folder under a directory
     * generated by the unique <code>name</code> and <code>date</code>.
     *
     * Index dates are checked against the occurrences file to determine if an
     * update is necessary.
     *
     * @param forceUpdate flag to force an update and ignore file date checks as boolean.
     */
    public void updateSamplingIndex(boolean forceUpdate) {
    }

    /**
     * attempts to load the dataset.
     *
     * Dataset can only be loaded if it is up to date and enabled.
     *
     * Dataset must be in an unloaded state before it is loaded.
     *
     * @return true if load was performed and successful.
     */
    @Override
    public boolean load() {
        if(occurrencesIndex != null) {
            return false;
        }

        occurrencesIndex = new OccurrencesIndexLoadedPoints(this, occurrencesFilename, getDirectoryName());

        isReady = true;

        return isReady();
    }

    @Override
    FilteringIndex getFilteringIndex() {
        return null;
    }
}
